# Ansible does not have windows versions of copy, so copying from the vagrant
# default share is necessary as is the requirement that windows can must be
# treated as a vagrant virtual machine.
# This also means that templates are impossible at this time.
# Instead, there are many raw commands. Even dealing with idempotency is
# difficult with the current level of windows support.
#
# "script" has an option "creates=" that should be used to determine if the task
# is complete when some thing is created on the file system, but it uses the
# stat module internally which is not supported on windows. On windows, the stat
# alternative win_stat has to be explicitly used instead.
---
##
## BUILD DEPS
##
# dolphin dependency: packaging
- include: w_7zip.yml
  vars:
    file: "{{ zip_file }}"
  tags: 7zip

# dolphin dependency: repository
- include: w_git.yml
  vars:
    file: "{{ git_file }}"
  tags: git

# buildbot dependency
- include: w_python.yml
  vars:
    file: "{{ python_file }}"
  tags: [python,buildbot]

# buildbot dependency
- include: w_pywin32.yml
  vars:
    file: "{{ pywin32_file }}"
  tags: [pywin32,buildbot]

# dolphin dependency: compiler
- include: w_visualstudio.yml
  vars:
    file: "{{ vs_file }}"
  tags: visualstudio

# dolphin dependency: qt
- include: w_qt.yml
  tags: qt

# dolphin dependency: symstore
- include: w_wdk.yml
  vars:
    file: "{{ wdk_file }}"
  tags: wdk

##
## PIP DEPENDENCIES
##
# http://trac.buildbot.net/wiki/RunningBuildbotOnWindows
- name: Install buildslave
  raw: "pip install buildbot-slave"

##
## BUILDBOT DEPLOY
##
- name: Create buildbot user
  win_user:
    name: "{{ buildbot_username }}"
    password: "{{ buildbot_username }}"
    password_never_expires: no
    state: present
  tags: buildbot

- name: Create buildbot area
  win_file:
    path: "c:/{{ buildbot_username }}/"
    state: directory
  tags: buildbot

- name: Install buildbot symbol store utility
  win_copy:
    src: files/storesymbols.bat
    dest: c:/buildbot/storesymbols.bat
  tags: buildbot

##
## SYMBOLSTORE
##
# The sadm/symbols/storesymbols.bat utility assumes that the symbols area is
# mapped to Z:\, but this is difficult or impossible to map to a folder, shared
# folder, or network host folder in Windows without having an actual real person
# do the mapping in Windows. So forget it - Windows is a waste of time. The
# storesymbols.bat here has replaced the Z:\ drive where the symbols are stored
# with a local folder on the local drive.
# It is guessed that the Dolphin infrastructure, which hosts the Windows build
# slave on the same physical machine as the build master, maps a drive to
# a share set up on the build master and this share is served over HTTPS by
# nginx from the build master host. Even if this were set up across virtual
# machines, the limitations of Windows makes this impossible to truly automate
# anyway. Since there is no need for remote access to the symbol store as any
# Windows development would be done locally, this is not a great loss.
- name: Create symbol store folder
  win_file:
    path: c:/symbols/
    state: directory
  tags: buildbot

- name: Create local symbol store folder
  win_file:
    path: c:/localsymbols/
    state: directory
  tags: buildbot

# https://randomascii.wordpress.com/2013/03/09/symbols-the-microsoft-way/
# https://msdn.microsoft.com/en-us/library/windows/hardware/ff537994%28v=vs.85%29.aspx
- name: Add symbol store to path
  win_environment:
    name: _NT_SYMBOL_PATH
    value: 'srv*c:\localsymbols*c:\symbols*https://msdl.microsoft.com/download/symbols'
    level: machine
  tags: buildbot

##
## BUILDBOT
##
- name: Create build slave
  raw: "buildslave create-slave c:\\{{ buildbot_username }} {{ buildmaster_host }}:{{ buildmaster_port }} {{ slave_username }} {{ slave_password }}"
  tags: buildbot

# Adding the service does not grant the logon privilege. This must be done
# explicitly.
- name: Install logon as service privilege utility
  win_copy:
    src: files/lsa_add_logon_as_svc.ps1
    dest: c:/tmp/lsa_add_logon_as_svc.ps1
  tags: buildbot

- name: Allow buildbot service logon
  raw: "powershell c:\\tmp\\lsa_add_logon_as_svc.ps1 {{ ansible_ssh_user }}"
  tags: buildbot

# The user should be the unprivileged user but since the user being used is the
# "root" user, the logon as details are for that user.
- name: Create buildbot service
  raw: "c:\\python27\\python.exe c:\\python27\\scripts\\buildbot_service.py --user .\\{{ ansible_ssh_user }} --password {{ ansible_ssh_pass }} --startup auto install"
  notify: restart windows buildbot
  tags: buildbot

- name: Set buildbot service registry
  win_regedit:
    key: HKLM:\SYSTEM\CurrentControlSet\services\Buildbot\Parameters
    data: "C:\\{{ buildbot_username }}"
    value: directories
    datatype: string
  tags: buildbot

##
## BUILDBOT
##
- name: Start build slave
  win_service:
    name: BuildBot
    start_mode: auto
    state: restarted

#
# Finalisation
# The windows base box is created without autologon. This is to remind the
# overeager not to logon until provisioning is complete due to the path changes
# that occur.
#
- name: Enable autologon
  win_regedit:
    key: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
    data: 1
    value: AutoAdminLogon
    datatype: dword
  tags: autologon
