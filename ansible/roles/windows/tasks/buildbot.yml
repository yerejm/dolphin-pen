# Ansible does not have windows versions of copy, so copying from the vagrant
# default share is necessary as is the requirement that windows can must be
# treated as a vagrant virtual machine.
# This also means that templates are impossible at this time.
# Instead, there are many raw commands. Even dealing with idempotency is
# difficult with the current level of windows support.
---
# Without the ability to change users in windows, this makes tasks harder than
# they should be to create. Given the incompleteness of features on windows,
# the vagrant user is the buildbot user.
# - name: Create buildbot user
#   win_user:
#     name: "{{ buildbot_username }}"
#     password: "{{ buildbot_username }}"
#     state: present

- name: Is buildbot area present?
  win_stat: path="c:\\{{ buildbot_username }}"
  register: buildbot_area

- name: Create buildbot area
  raw: "mkdir c:\\{{ buildbot_username }}"
  when: not buildbot_area.stat.exists

# http://trac.buildbot.net/wiki/RunningBuildbotOnWindows
- name: Install buildslave
  raw: "pip install buildbot-slave"

- name: Create build slave
  raw: "buildslave create-slave c:\\{{ buildbot_username }} {{ master_address }} {{ slave_username }} {{ slave_password }}"

# Adding the service does not grant the logon privilege. This must be done
# explicitly.
- name: Install logon as service privilege utility
  raw: "copy c:\\vagrant\\ansible\\roles\\windows\\files\\lsa_add_logon_as_svc.ps1 c:\\tmp"

- name: Allow buildbot service logon
  raw: "powershell c:\\tmp\\lsa_add_logon_as_svc.ps1 {{ ansible_ssh_user }}"

# The user should be the unprivileged user but since the user being used is the
# "root" user, the logon as details are for that user.
- name: Create buildbot service
  raw: "c:\\python27\\python.exe c:\\python27\\scripts\\buildbot_service.py --user .\\{{ ansible_ssh_user }} --password {{ ansible_ssh_pass }} --startup auto install"

- name: Set buildbot service registry entries (1)
  raw: "powershell New-Item -path Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Buildbot\\Parameters"

- name: Set buildbot service registry entries (2)
  raw: "powershell New-ItemProperty -path Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Buildbot\\Parameters -Name directories -PropertyType String -Value C:\\{{ buildbot_username }}"

# The sadm/symbols/storesymbols.bat utility assumes that the symbols area is
# mapped to Z:\, but this is difficult or impossible to map to a folder, shared
# folder, or network host folder in Windows without having an actual real person
# do the mapping in Windows. So forget it - Windows is a waste of time. The
# storesymbols.bat here has replaced the Z:\ drive where the symbols are stored
# with a local folder on the local drive.
# It is guessed that the Dolphin infrastructure, which hosts the Windows build
# slave on the same physical machine as the build master, maps a drive to
# a share set up on the build master and this share is served over HTTPS by
# nginx from the build master host. Even if this were set up across virtual
# machines, the limitations of Windows makes this impossible to truly automate
# anyway. Since there is no need for remote access to the symbol store as any
# Windows development would be done locally, this is not a great loss.
- name: Is symbol area present?
  win_stat: path="c:\\symbols"
  register: symbol_area

- name: Create symbol store folder
  raw: "mkdir c:\\symbols"
  when: not symbol_area.stat.exists

- name: Create local symbol store folder
  raw: "mkdir c:\\localsymbols"
  when: not symbol_area.stat.exists

- name: Install buildbot symbol store utility
  raw: "copy c:\\vagrant\\ansible\\roles\\windows\\files\\storesymbols.bat c:\\buildbot"
  when: not symbol_area.stat.exists

# https://randomascii.wordpress.com/2013/03/09/symbols-the-microsoft-way/
# https://msdn.microsoft.com/en-us/library/windows/hardware/ff537994%28v=vs.85%29.aspx
- name: Add symbol store to path
  raw: powershell [Environment]::SetEnvironmentVariable('_NT_SYMBOL_PATH', 'srv*c:\localsymbols*c:\symbols*https://msdl.microsoft.com/download/symbols', [EnvironmentVariableTarget]::Machine)
  when: not symbol_area.stat.exists

# All dependencies are done. Start the build slave.
- name: Start build slave
  win_service:
    name: BuildBot
    start_mode: auto
    state: started

